NLP (LABELED)  sentiment analysis

#IMPORT LIBRARY
import pandas as pd
import numpy as np

#LOAD DATA
import os
os.chdir('C:\\Users\\NEW\\Desktop\\python\\datasets')
ash = pd.read_csv('data1.csv')
pd.set_option('display.max_columns', None)

x=ash.loc[:,'independent variables']
y=ash.drop('independent variables, axis =1')

#IMPORT LIBRARY
import sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer,HashingVectorizer

#PRE-PROCESS
#missing values
data.dropna() or fillna(mean)

ash = data.copy()

ash.reset_index(inplace = True)

#NLP-MODEL
from nltk.corpus import stopwords                  #(EG : in,the,is)
from nltk.stem.porter import PorterStemmer         #(remove prefix, eg : giving - give)
ps = PorterStemmer()
corpus=[]
for i in range (0,len(messages)):
	review = re.sub('[az-A-Z]','',messages['title'][i])        #(remove special characters)
	review = review.lower()                                    #(covert upper class to lower)
	review = review.split()                                    #(tokenization)
	review = [ps.stem(word) for word in review if not word in stopwords.words('english')]
	review = ' ' .join(review)
	corpus.append(review)

corpus

########bag of words (covert text into vectors)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 5000, ngram = (1,3))      #(ngram : combination of 1,2,3 words as 1 feature)
x = cv.fit_transform(corpus).toarray()

#data split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30,random_state=0)

cv.get_feature_names()[:20]
cv.get_params()

data = pd.DataFrame(x_train,columns = cv.get_feature_names)


from sklearn.navie_bayes import MultinomialNB
classifier = MultiNomialNB()

from sklearn import metrics
import numpy as np
import intertools

classifier.fit(x_train,y_train)
pred = classifier.predict(x_test)

#Classification report
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
print(confusion_matrix(y_test,pred))
print(classification_report(y_test,pred))
print(accuracy_score(y_test, pred))

#confusion_matrix plot
import seaborn as sn
cm = metrices.confusion_matrix(y_test,pred)
plt.figure(figsize = (10,8))
sn.heatmap(cm,annot=True, fmt = 'd') 


### non label data

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from textblob import TextBlob

import warnings
warnings.filter warnings('ignore')

sample:
	TextBlob(" senetence  ").sentiment


#algorithm:
#sentiment polarity

pol[]         #list contains comments
for i in ash.comment_text.values:
	try:
	    analysis = TextBlob(i)
	    plo.append(analysis.sentiment.polarity)
	except:
	    pol.append(0)

data('pol') = pol

data['pol'](data.pol==0) = 0
data['pol'](data.pol>0) = 1
data['pol'](data.pol<0) = -1

data_potive = data[data.pol==1]
data_negative = data[data.pol==0]